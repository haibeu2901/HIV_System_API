using HIV_System_API_BOs;
using HIV_System_API_DTOs.AccountDTO;
using HIV_System_API_DTOs.DoctorDTO;
using HIV_System_API_DTOs.DoctorWorkScheduleDTO;
using HIV_System_API_Repositories.Implements;
using HIV_System_API_Repositories.Interfaces;
using HIV_System_API_Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HIV_System_API_Services.Implements
{
    public class DoctorService : IDoctorService
    {
        private readonly IDoctorRepo _doctorRepo;
        public DoctorService()
        {
            _doctorRepo = new DoctorRepo();
        }

        private Doctor MapToEntity(DoctorRequestDTO dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));

            return new Doctor
            {
                AccId = dto.AccId,
                Degree = dto.Degree,
                Bio = dto.Bio
                // DctId is not set here, as it's usually generated by the database
                // Navigation properties (Acc, Appointments, DoctorWorkSchedules) are not set here
            };
        }

        private DoctorResponseDTO MapToResponseDTO(Doctor doctor)
        {
            if (doctor == null) throw new ArgumentNullException(nameof(doctor));

            var workSchedules = doctor.DoctorWorkSchedules?
                .Select(ws => new DoctorWorkScheduleResponseDTO
                {
                    DocWorkScheduleId = ws.DwsId,
                    DoctorId = ws.DoctorId,
                    DayOfWeek = ws.DayOfWeek ?? 0,
                    StartTime = ws.StartTime,
                    EndTime = ws.EndTime
                }).ToList() ?? new List<DoctorWorkScheduleResponseDTO>();

            return new DoctorResponseDTO
            {
                DoctorId = doctor.DctId,
                Degree = doctor.Degree,
                Bio = doctor.Bio,
                AccId = doctor.AccId,
                Account = new AccountResponseDTO
                {
                    AccId = doctor.Acc.AccId,
                    AccUsername = doctor.Acc.AccUsername,
                    AccPassword = doctor.Acc.AccPassword,
                    Email = doctor.Acc.Email,
                    Fullname = doctor.Acc.Fullname,
                    Dob = doctor.Acc.Dob,
                    Gender = doctor.Acc.Gender,
                    Roles = doctor.Acc.Roles,
                    IsActive = doctor.Acc.IsActive
                },
                WorkSchedule = workSchedules
            };
        }

        public async Task<DoctorResponseDTO> CreateDoctorAsync(DoctorRequestDTO doctor)
        {
            if (doctor == null)
                throw new ArgumentNullException(nameof(doctor));

            // Validation: AccId must be positive
            if (doctor.AccId <= 0)
                throw new ArgumentException("Account ID must be a positive integer.", nameof(doctor.AccId));

            // Validation: Degree is required and should not be empty
            if (string.IsNullOrWhiteSpace(doctor.Degree))
                throw new ArgumentException("Degree is required.", nameof(doctor.Degree));

            // Validation: Bio is required and should not be empty
            if (string.IsNullOrWhiteSpace(doctor.Bio))
                throw new ArgumentException("Bio is required.", nameof(doctor.Bio));

            // Map DTO to entity
            var doctorEntity = MapToEntity(doctor);

            // Create doctor in repository
            var createdDoctor = await _doctorRepo.CreateDoctorAsync(doctorEntity);

            // Fetch the full doctor entity with navigation properties (e.g., Acc)
            var fullDoctor = await _doctorRepo.GetDoctorByIdAsync(createdDoctor.DctId);
            if (fullDoctor == null)
                throw new InvalidOperationException("Failed to retrieve the created doctor.");

            // Map to response DTO
            return MapToResponseDTO(fullDoctor);
        }

        public async Task<bool> DeleteDoctorAsync(int id)
        {
            // Call the repository to delete the doctor by id
            return await _doctorRepo.DeleteDoctorAsync(id);
        }

        public async Task<List<DoctorProfileResponse>> GetAllDoctorsAsync()
        {
            var doctors = await _doctorRepo.GetAllDoctorsAsync();
            var result = new List<DoctorProfileResponse>();

            foreach (var doctor in doctors)
            {
                // Defensive: skip if Acc is null (should not happen if DB is correct)
                if (doctor.Acc == null)
                    continue;

                result.Add(new DoctorProfileResponse
                {
                    Degree = doctor.Degree,
                    Bio = doctor.Bio,
                    Gender = doctor.Acc.Gender,
                    Email = doctor.Acc.Email,
                    Fullname = doctor.Acc.Fullname,
                    Dob = doctor.Acc.Dob
                });
            }

            return result;
        }

        public async Task<DoctorResponseDTO?> GetDoctorByIdAsync(int id)
        {
            // Fetch the doctor entity by id from the repository
            var doctor = await _doctorRepo.GetDoctorByIdAsync(id);

            // If not found or Acc navigation property is null, return null
            if (doctor == null || doctor.Acc == null)
                return null;

            // Map to response DTO
            return MapToResponseDTO(doctor);
        }

        public async Task<DoctorResponseDTO?> UpdateDoctorAsync(int id, DoctorRequestDTO doctor)
        {
            if (doctor == null) throw new ArgumentNullException(nameof(doctor));

            // Fetch the existing doctor entity
            var existingDoctor = await _doctorRepo.GetDoctorByIdAsync(id);
            if (existingDoctor == null)
                return null;

            // Update properties
            existingDoctor.Degree = doctor.Degree;
            existingDoctor.Bio = doctor.Bio;
            existingDoctor.AccId = doctor.AccId;

            // Update in repository
            var updatedDoctor = await _doctorRepo.UpdateDoctorAsync(id, existingDoctor);
            if (updatedDoctor == null)
                return null;

            // Fetch the full doctor entity with navigation properties (e.g., Acc)
            var fullDoctor = await _doctorRepo.GetDoctorByIdAsync(updatedDoctor.DctId);
            if (fullDoctor == null || fullDoctor.Acc == null)
                return null;

            // Map to response DTO
            return MapToResponseDTO(fullDoctor);
        }

        public async Task<List<DoctorProfileResponse>> GetDoctorsByDateAndTimeAsync(DateOnly apmtDate, TimeOnly apmTime)
        {
            var doctors = await _doctorRepo.GetDoctorsByDateAndTimeAsync(apmtDate, apmTime);
            return doctors.Select(doctor => new DoctorProfileResponse
            {
                Email = doctor.Acc?.Email,
                Fullname = doctor.Acc?.Fullname,
                Dob = doctor.Acc?.Dob,
                Gender = doctor.Acc.Gender,
                Degree = doctor.Degree,
                Bio = doctor.Bio
            }).ToList();
        }

        public async Task<DoctorProfileResponse?> GetDoctorProfileAsync(int id)
        {
            var doctor = await _doctorRepo.GetDoctorByIdAsync(id);
            if (doctor == null || doctor.Acc == null)
                return null;
            return new DoctorProfileResponse
            {
                Degree = doctor.Degree,
                Bio = doctor.Bio,
                Gender = doctor.Acc.Gender,
                Email = doctor.Acc.Email,
                Fullname = doctor.Acc.Fullname,
                Dob = doctor.Acc.Dob
            };
        }
    }
}
